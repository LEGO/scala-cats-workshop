{"version":3,"sources":["Websocket.tsx","components/CreateUser.tsx","components/ChatApp/Users.tsx","components/ChatApp/Message.tsx","components/ChatApp/Input.tsx","components/ChatApp/Chat.tsx","components/ChatApp/index.tsx","App.tsx","index.tsx"],"names":["initialState","username","client","Socket","React","createContext","Websocket","children","WebSocket","Provider","value","CreateUser","createUser","useState","userName","setUserName","className","onSubmit","e","preventDefault","type","placeholder","minLength","required","onChange","target","Users","users","map","user","key","Message","time","data","timestamp","Date","toLocaleTimeString","text","Input","useContext","message","setMessage","send","JSON","stringify","Chat","messages","chatBottom","useRef","useEffect","current","scrollIntoView","behavior","ref","ChatApp","userList","addMessage","onmessage","parse","console","log","UserJoined","UserLeft","concat","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4aab9a7.chunk.js","sourcesContent":["import React, {FC, ReactNode} from 'react'\nimport {w3cwebsocket as WebSocket, w3cwebsocket} from 'websocket'\n\ninterface State {\n    username: string\n    client: w3cwebsocket | null\n}\n\nconst initialState: State = {\n    username: '',\n    client: null,\n}\n\nexport const Socket = React.createContext(initialState)\n\ninterface Props {\n    username: string\n    children: ReactNode\n}\n\nexport const Websocket: FC<Props> = ({username, children}) => {\n    initialState.client = new WebSocket(`ws://127.0.0.1:4000/chat?username=${username}`)\n    initialState.username = username\n\n    return (\n        <Socket.Provider value={initialState}>\n            {children}\n        </Socket.Provider>\n    )\n}","import React, {FC, useState} from 'react'\nimport './CreateUser.scss'\n\ninterface Props {\n    createUser: (userName: string) => void\n}\n\nexport const CreateUser: FC<Props> = ({createUser}) => {\n    const [userName, setUserName] = useState('')\n\n    const submitUser = (e: any) => {\n        e.preventDefault()\n        createUser(userName)\n        setUserName('')\n    }\n\n    return (\n        <div className='modal-overlay'>\n            <div className='modal-wrapper'>\n                <h2>Insert your username</h2>\n                <form onSubmit={submitUser}>\n                    <input\n                        type={'text'}\n                        placeholder={'your username'}\n                        value={userName}\n                        minLength={1}\n                        required={true}\n                        onChange={e => {\n                            e.preventDefault()\n                            setUserName(e.target.value)\n                        }}\n                    />\n                </form>\n            </div>\n        </div>\n    )\n}","import React, {FC} from 'react'\nimport './Users.scss'\n\ninterface Props {\n    username: string\n    users: string[]\n}\n\nexport const Users: FC<Props> = ({username, users}) => {\n\n    return (\n        <div className='users'>\n            <div>@{username}</div>\n            <h3>users</h3>\n            <div>\n                {users.map((user, key) => (<p key={key}>{user}</p>))}\n            </div>\n        </div>\n    )\n}","import React, {FC} from 'react'\nimport './Message.scss'\n\ninterface IChatMessage {\n    username: string\n    timestamp: number\n    text: string\n}\n\ninterface Props {\n    data: IChatMessage\n}\n\nconst time2Date = (time: number) => {\n    const date = new Date(time * 1000)\n    return date.toLocaleTimeString()\n}\n\nexport const Message: FC<Props> = ({data}) => {\n    return (\n        <div className={'message'}>\n            <div className={'message-handler'}>\n                <span className={'message-handler-user'}>{data.username}</span>\n                <span className={'message-handler-date'}>{time2Date(data.timestamp)}</span>\n            </div>\n            <div className={'message-text'}>\n                <span>{data.text}</span>\n            </div>\n        </div>\n    )\n}","import React, {FC, useContext, useState} from 'react'\nimport {Socket} from '../../Websocket'\n\nexport const Input: FC = () => {\n    const {client} = useContext(Socket)\n    const [message, setMessage] = useState('')\n\n    const sendMessage = (e: any) => {\n        e.preventDefault()\n        client!.send(JSON.stringify({text: message}))\n        setMessage('')\n    }\n\n    return (\n        <form onSubmit={sendMessage}>\n            <input\n                type={'text'}\n                placeholder={'write to chat..'}\n                value={message}\n                minLength={1}\n                required={true}\n                onChange={e => {\n                    e.preventDefault()\n                    setMessage(e.target.value)\n                }}/>\n        </form>\n    )\n}","import React, {FC, useEffect, useRef} from 'react'\nimport {Message} from './Message'\nimport {Input} from './Input'\nimport './Chat.scss'\n\ninterface Props {\n    messages: any[]\n}\n\nexport const Chat: FC<Props> = ({messages}) => {\n    const chatBottom = useRef<any>()\n\n    useEffect(() => {\n        chatBottom.current!.scrollIntoView({behavior: 'smooth'})\n    }, [messages])\n\n    return (\n        <div className='chat'>\n            <div className='chat-messages'>\n                {messages.map((message: any, key: number) => (\n                    <Message key={key} data={message}/>\n                ))}\n                <div ref={chatBottom}/>\n            </div>\n            <div className='chat-input'>\n                <Input/>\n            </div>\n        </div>\n    )\n}","import React, {FC, useContext, useEffect, useState} from 'react'\nimport {Users} from './Users'\nimport {Chat} from './Chat'\nimport {Socket} from '../../Websocket'\nimport './index.scss'\n\nexport const ChatApp: FC = () => {\n    const {client, username} = useContext(Socket)\n    const [users, userList] = useState([])\n    const [messages, addMessage] = useState([])\n\n    useEffect(() => {\n        client!.onmessage = (message) => {\n            const data = JSON.parse(message.data as string)\n            console.log('chat app', data)\n            if (data.UserJoined) {\n                userList(data.UserJoined.userList)\n            }\n            if (data.UserLeft) {\n                userList(data.UserLeft.userList)\n            }\n            if (data.Message) {\n                addMessage(messages.concat(data.Message))\n            }\n        }\n    }, [client, messages])\n\n    return (\n        <div className='chat-app'>\n            <Users username={username} users={users}/>\n            <Chat messages={messages}/>\n        </div>\n    )\n}","import React, {useState} from 'react'\nimport {Websocket} from './Websocket'\nimport {CreateUser} from './components/CreateUser'\nimport {ChatApp} from './components/ChatApp'\n\nconst App: React.FC = () => {\n    const [user, createUser] = useState('')\n\n    return (\n        <>\n            {user === '' ? (\n                <CreateUser createUser={createUser}/>\n            ) : (\n                <Websocket username={user}>\n                    <ChatApp/>\n                </Websocket>\n            )}\n        </>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './style/index.scss'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}